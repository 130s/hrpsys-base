/**
 * @file ImpedanceControllerService.idl
 * @brief Services for the impedance interface
 */
module OpenHRP
{
  
  interface ImpedanceControllerService
  {
    typedef sequence<double, 3> DblSequence3;

    // Impedance Controller Parameters
    struct impedanceParam {
      string name; // Name of end effector.
      string base_name; // Name of inverse kinematics root link.
      string target_name; // Name of inverse kinematics end effector link.
      double M_p; // Position mass [N/(m/s^2)]
      double D_p; // Position damper [N/(m/s)]
      double K_p; // Position spring [N/m]
      double M_r; // Rotation mass [Nm/(rad/s^2)]
      double D_r; // Rotation damper [N/(rad/s)]
      double K_r; // Rotation spring [N/rad]
      DblSequence3 ref_force; // Reference Force [N] (x,y,z).
      DblSequence3 force_gain; // Force gain (x,y,z).
      DblSequence3 ref_moment; // Reference Moment [Nm] (x,y,z).
      DblSequence3 moment_gain; // Moment gain (x,y,z).
      double sr_gain; // SR-inverse gain for inverse kinematics.
      double avoid_gain; // Avoid joint limit gain for inverse kinematics.
      double reference_gain; // Reference joint angles tracking gain for inverse kinematics.
      double manipulability_limit; // Manipulability limit for inverse kinematics.
    };

    /**
     * @brief set impedance parameters.
     * @param i_param new impedance parameters
     * @return true if set successfully, false otherwise
     */
    boolean setImpedanceControllerParam(in impedanceParam i_param);

    /**
     * @brief get impedance parameters.
     * @param name is name of the impedance parameter set and i_param output impedance parameters
     * @return true if set successfully, false otherwise
     */
    boolean getImpedanceControllerParam(in string name, out impedanceParam i_param);

    /**
     * @brief remove impedance parameters.
     * @param name name of the impedance parameter set
     * @return true if set successfully, false otherwise
     */
    boolean deleteImpedanceController(in string name);

    /**
     * @brief wait to finish deleting the impedance param object.
     * @param name name of the impedance parameter set
     */
    void waitDeletingImpedanceController(in string name);

    /**
     * @brief remove impedance parameters and wait to finish deleting the impedance param object.
     * @param name name of the impedance parameter set
     * @return true if set successfully, false otherwise
     */
    boolean deleteImpedanceControllerAndWait(in string name);
  };
};
