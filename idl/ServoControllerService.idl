/**
 * @file ServoControllerService.idl
 * @brief Services for the robot hardware interface
 */
module OpenHRP
{
  interface ServoControllerService
  {
    typedef sequence<short> iSequence;
    typedef sequence<double> dSequence;

    /**
     * @brief Interpolate just one joint angle specified by \em id using duration \em tm. Function returns without waiting for interpolation to finish
     * @param id joint id
     * @param jv joint angle
     * @param tm duration
     * @return true if set successuflly, false otherwise
     */
    boolean setJointAngle(in short id, in double jv, in double tm);

    /**
     * @brief Interpolate all joint angles on servo moters using duration specified by \em tm. Returns without waiting for whole sequence to be sent to robot.
     * @param jvs sequence of joint angles
     * @param tm duration
     * @return true joint angles are set successfully, false otherwise
     */
    boolean setJointAngles(in dSequence jvs, in double tm);

    /**
     * @brief Obttain just one joint angle specified by \em id. Function returns without waiting for interpolation to finish
     * @param id joint id
     * @param jv joint angle
     * @return true if get successuflly, false otherwise
     */
    boolean getJointAngle(in short id, out double jv);

    /**
     * @brief Interpolate all joint angles on servo moters. Returns without waiting for whole sequence to be sent to robot.
     * @param jvs sequence of joint angles
     * @return true joint angles are get successfully, false otherwise
     */
    boolean getJointAngles(out dSequence jvs);

    /**
     * @brief add a joint group
     * @param gname name of the joint group
     * @param ids list of joint ids
     * @return true if the group is added successfully, false otherwise
     */
    boolean addJointGroup(in string gname, in iSequence ids);

    /**
     * @brief remove a joint group
     * @param gname name of the joint group
     * @return true if the group is removed successfully, false otherwise
     */
    boolean removeJointGroup(in string gname);

    /**
     * @brief Interpolate joint angles in a group  using duration specified by \em tm. Returns without waiting for whole sequence to be sent to robot.
     * @param gname name of the joint group
     * @param jvs sequence of joint angles
     * @param tm duration
     * @return true joint angles are set successfully, false otherwise
     */
    boolean setJointAnglesOfGroup(in string gname, in dSequence jvs, in double tm);

    /**
     * @brief Interpolate just one joint max torque specified by \em id. Function returns without waiting for interpolation to finish
     * @param id joint id
     * @param tq joint max torque (percentage)
     * @return true if set successuflly, false otherwise
     */
    boolean setMaxTorque(in short id, in short tq);
  };
};
