/**
 * @file AutoBalancerService.idl
 * @brief Services for the autobalancer interface
 */
//#include "OpenHRPCommon.idl"
module OpenHRP
{
  
  interface AutoBalancerService
  {
    typedef sequence<double, 3> DblSequence3;
    //typedef sequence<double, 4> DblSequence4;
    typedef double DblArray3[3];
    typedef double DblArray4[4];

    // Foot Step
    struct Footstep
    {
      DblArray3 pos; // Foot position [m]
      DblArray4 rot; // Foot orientation by quaternion (w,x,y,z)
      string leg; // Leg name (rleg or lleg)
    };
    typedef sequence<Footstep> FootstepSequence;

    enum SupportLegState {
      RLEG,
      LLEG,
      BOTH
    };

    enum OrbitType {
      SHUFFLING,
      CYCLOID,
      RECTANGLE
    };

    struct FootstepParam
    {
      Footstep rleg_coords; // Current right foot coords
      Footstep lleg_coords; // Current left foot coords
      Footstep support_leg_coords; // Support foot coords
      Footstep swing_leg_coords; // Swing foot coords, which is interpolation betwee swing_leg_src_coords and swing_leg_dst_coords
      Footstep swing_leg_src_coords; // Source coords for swing foot
      Footstep swing_leg_dst_coords; // Destination coords for swing foot
      Footstep dst_foot_midcoords; // Destination foot midcoords
      SupportLegState support_leg; // RLEG or LLEG
      SupportLegState support_leg_with_both; // RLEG, LLEG, or BOTH
    };

    typedef sequence<string> StrSequence;

    struct GaitGeneratorParam // Parameters for GaitGenerator
    {
      double default_step_time; // Step time [s]
      double default_step_height; // Step height [m]
      double default_double_support_ratio; // Ratio of double support period. Ratio is included in (0, 1). Double support period time is default_double_support_ratio*default_step_time.
      sequence<double, 3> stride_parameter; // Stride limitation of x[m], y[m], and theta[deg] for goPos
      OrbitType default_orbit_type; // Default OrbitType
    };

    struct AutoBalancerParam // Parameters for AutoBalancer
    {
      sequence<DblSequence3, 2> default_zmp_offsets; // ZMP offset vectors[m] for rleg and lleg (<-please set by this order)
      double move_base_gain;
    };

    /**
     * @brief Walk to the goal position and orientation. Returns without waiting for whole steps to be executed.
     * @param i_x[m], i_y[m], and i_th[deg] are goal x-y-position and z-orientation from the current mid-coords of right foot and left foot.
     * @return true if set successfully, false otherwise
     */
    boolean goPos(in double x, in double y, in double th);

    /**
     * @brief Walk at the desired velocity. If the robot is stopping, the robot starts stepping. Returns without waiting for whole steps to be executed.
     * @param i_vx[m/s], i_vy[m/s], and i_vth[deg/s] are velocity in the current mid-coords of right foot and left foot.
     * @return true if set successfully, false otherwise
     */
    boolean goVelocity(in double vx, in double vy, in double vth);

    /**
     * @brief Stop stepping.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean goStop();

    /**
     * @brief Set footsteps. Returns without waiting for whole steps to be executed.
     * @param fs is sequence of FootStep structure.
     * @return true if set successfully, false otherwise
     */
    boolean setFootSteps(in FootstepSequence fs);

    /**
     * @brief Wait for whole footsteps are executed.
     * @param
     * @return true if set successfully, false otherwise
     */
    void waitFootSteps();

    /**
     * @brief Start AutoBalancer mode in which the robot controls the COM.
     * @param limbs is sequence of limbs to fix. limbs are :rleg, :lleg, :rarm, and :larm
     * @return true if set successfully, false otherwise
     */
    boolean startAutoBalancer(in StrSequence limbs);

    /**
     * @brief Stop AutoBalancer mode.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean stopAutoBalancer();

    /**
     * @brief Set GaitGenerator parameters
     * @param i_param is input parameter
     * @return true if set successfully, false otherwise
     */
    boolean setGaitGeneratorParam(in GaitGeneratorParam i_param);

    /**
     * @brief Get GaitGenerator parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getGaitGeneratorParam(out GaitGeneratorParam i_param);

    /**
     * @brief Set AutoBalancer parameters
     * @param i_param is input parameter
     * @return true if set successfully, false otherwise
     */
    boolean setAutoBalancerParam(in AutoBalancerParam i_param);

    /**
     * @brief Get AutoBalancer parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getAutoBalancerParam(out AutoBalancerParam i_param);

    /**
     * @brief Get footstep parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getFootstepParam(out FootstepParam i_param);
  };
};
