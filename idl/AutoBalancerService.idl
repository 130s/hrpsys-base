/**
 * @file AutoBalancerService.idl
 * @brief Services for the autobalancer interface
 */
//#include "OpenHRPCommon.idl"
module OpenHRP
{
  
  interface AutoBalancerService
  {
    typedef sequence<double, 3> DblSequence3;
    //typedef sequence<double, 4> DblSequence4;
    typedef double DblArray3[3];
    typedef double DblArray4[4];
    struct Footstep
    {
      DblArray3 pos; // foot position
      DblArray4 rot; // foot orientation by quaternion
      string leg; // leg name
    };
    typedef sequence<Footstep> FootstepSequence;

    enum SupportLegState {
      RLEG,
      LLEG,
      BOTH
    };

    struct FootstepParam
    {
      Footstep rleg_coords;
      Footstep lleg_coords;
      Footstep support_leg_coords;
      Footstep swing_leg_coords;
      Footstep swing_leg_src_coords;
      Footstep swing_leg_dst_coords;
      Footstep dst_foot_midcoords;
      SupportLegState support_leg;
      SupportLegState support_leg_with_both;
    };

    struct AutoBalancerLimbParam
    {
      string name;
      DblArray3 target2foot_offset_pos;
      DblArray4 target2foot_offset_rot;
    };
    typedef sequence<AutoBalancerLimbParam> AutoBalancerLimbParamSequence;

    struct GaitGeneratorParam // parameters for GaitGenerator
    {
      double default_step_time; // step time [s]
      double default_step_height; // step height [m]
      sequence<double, 3> stride_parameter; // stride limitation of x[m], y[m], and theta[deg]
    };

    struct AutoBalancerParam // parameters for AutoBalancer
    {
      sequence<DblSequence3, 2> default_zmp_offsets; // zmp offset vectors[m] for :rleg and :lleg (<-please set by this order)
      double move_base_gain;
    };

    /**
     * @brief go pos.
     * @param i_x[m], i_y[m], i_th[deg]
     * @return true if set successfully, false otherwise
     */
    boolean goPos(in double x, in double y, in double th);

    /**
     * @brief go velocity.
     * @param i_vx[m/s], i_vy[m/s], i_vth[deg/s]
     * @return true if set successfully, false otherwise
     */
    boolean goVelocity(in double vx, in double vy, in double vth);

    /**
     * @brief go stop.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean goStop();

    /**
     * @brief set footsteps.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean setFootSteps(in FootstepSequence fs);

    /**
     * @brief wait footsteps.
     * @param
     * @return true if set successfully, false otherwise
     */
    void waitFootSteps();

    /**
     * @brief start AutoBalancer Mode.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean startABC(in AutoBalancerLimbParamSequence alp);

    /**
     * @brief stop AutoBalancer Mode.
     * @param
     * @return true if set successfully, false otherwise
     */
    boolean stopABC();

    /**
     * @brief set GaitGenerator parameters
     * @param i_param is input parameter
     * @return true if set successfully, false otherwise
     */
    boolean setGaitGeneratorParam(in GaitGeneratorParam i_param);

    /**
     * @brief get impedance parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getGaitGeneratorParam(out GaitGeneratorParam i_param);

    /**
     * @brief set AutoBalancer parameters
     * @param i_param is input parameter
     * @return true if set successfully, false otherwise
     */
    boolean setAutoBalancerParam(in AutoBalancerParam i_param);

    /**
     * @brief get impedance parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getAutoBalancerParam(out AutoBalancerParam i_param);

    /**
     * @brief get footstep param parameters.
     * @param i_param is output parameters
     * @return true if set successfully, false otherwise
     */
    boolean getFootstepParam(out FootstepParam i_param);
  };
};
